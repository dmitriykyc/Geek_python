# 1. Реализовать скрипт проверки типа данных каждого элемента.

a = [1, 'asd', None, True, 1.56, ['asd', 'dsa']]
for i in a:
    print(type(i))

# 2. Для списка реализовать обмен значений соседних элементов,
# т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().

a = list(input('Введите что нибудь:'))
if len(a) % 2 == 0:
    b = len(a)
else:
    b = len(a) - 1
for i in range(0, b, 2):
    a[i], a[i + 1] = a[i + 1], a[i]

print(a)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.

#Решение через list
number = int(input('Введите месяц в виде целого числа от 1 до 12:'))
months = ['Зима', 'Весна', 'Лето', 'Осень']
if number in [1, 2, 12]:
    print(months[0])
elif number in [3, 4, 5]:
    print(months[1])
elif number in [6, 7, 8]:
    print(months[2])
else:
    print(months[3])

# Второй вариант c dict()

seasons = {'Зима': (1, 2, 12),
       'Весна': (3, 4, 5),
       'Лето': (6, 7, 8),
       'Осень': (9, 10, 11)}

month = int(input('Введите месяц: '))
for i in seasons.keys():
    if month in seasons[i]:
        print(i)


# 4. 
# Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. 
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

words = input('Введите фразу:')

for i, el in enumerate(words.split(' ')):
    print(i, el[:10]) if len(words) > 10 else print(i, el)


# 5.
# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. 
# У пользователя необходимо запрашивать новый элемент рейтинга. 
# Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

my_list = [7, 5, 3, 3, 2]

number = int(input('Введите число: '))
if number > max(my_list):
    my_list.insert(0, number)
elif number in my_list:
    my_list.insert(my_list.index(number), number)
else:
    my_list.append(number)
print(my_list)

# И вот попроще подумал можно сделать:
my_list2 = [7, 5, 3, 3, 2]

number2 = int(input('Введите число: '))
my_list2.append(number2)
print(sorted(my_list2, reverse=True))

# 6.
# *Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. 
# Каждый кортеж хранит информацию об отдельном товаре. 
# В кортеже должно быть два элемента — номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения). 
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.

name_stat = []
price_stat = []
qty_stat = []
ed_stat = []
finish = []
i = 1
while i < 4:
    name = input('Введите название: ')
    name_stat.append(name)
    price = input('Введите цену: ')
    price_stat.append(price)
    qty = input('Введите количество: ')
    qty_stat.append(qty)
    ed = input('Введите единицу измерения: ')
    ed_stat.append(ed)
    a = {'Название: ': name, 'Цена: ': price, 'Количество: ': qty, 'Един. изм.: ': ed}
    finish.append((i, a))
    i += 1
print(finish)
print({'Название': name_stat, 'Цена': price_stat, 'Количество': qty_stat, 'Един. изм.': ed_stat})


 
