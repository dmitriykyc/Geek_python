#1. 

#Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу:
# (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
from sys import argv

script_name, virabotka, stavka, premia = argv

print(f'Зарплата сотрудника составит: {(int(virabotka) * int(stavka)) + int(premia)}')


# 3. 
# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

numbers = [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]
print(numbers)

# 4.
# Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.

a = [1, 2, 5, 2, 8, 44, 7, 11, 1, 11, 44] # 5 8 7

numbers = [el for el in a if a.count(el) == 1 ]
print(numbers)

#5.
# Реализовать формирование списка, используя функцию range()
# и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce
numbers = [el for el in range(100, 1001) if el % 2 == 0]

print(reduce(lambda a,b: a + b, numbers))

print(sum(numbers)) # сравнить

# 6.
# Реализовать два небольших скрипта:
# а) бесконечный итератор, генерирующий целые числа, начиная с указанного,
# б) бесконечный итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.

from itertools import count, cycle

for el in count(4):
    if el > 11:
        break
    print(el)

a = 0
for i in cycle(['a', 'b', 'c']):
    if a > 10:
        break
    print(i)
    a += 1


# 7. 
# Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fibo_gen().
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые 15 чисел.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fibo_gen():
    numbers = 0
    for i in range(1, 16):
        yield i


a = 0
for el in fibo_gen():
    a += el

print(a)