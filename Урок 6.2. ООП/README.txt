# 1. 
# Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод init()), который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода str() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода add() для реализации операции сложения двух объектов класса Matrix (двух матриц). 
# Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с первым элементом 
#   первой строки второй матрицы и т.д.


class Matrix:
    def __init__(self, param):
        self.param = param

    def __add__(self, other):
        for i in range(len(self.param)):
            for i_2 in range(len(other.param[i])):
                self.param[i][i_2] += other.param[i][i_2]
        return Matrix(self.param)


    def __str__(self):
        for i in self.param:
            for i_2 in range(len(i)):
                print('  ' + str(i[i_2]) + ' ', end= '')
            print('')
        return ''




matr_1 = Matrix([[1, 2], [3, 4], [5, 6]])
matr_2 = Matrix([[10, 10], [10, 10], [10, 10]])
print(matr_1 + matr_2)


# 2. Реализовать проект расчета суммарного расхода ткани на производство одежды. 
# Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название. 
# К типам одежды в этом проекте относятся пальто и костюм. 
# У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), для костюма (2 * H + 0.3).
# Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани. 
# Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.


from abc import ABC, abstractmethod


class Clothes(ABC):

    def __init__(self, param):
        self.param = param


    @property
    def all_c(self):
        return f'Сумма затраченной ткани равна: {self.param / 6.5 + 0.5 + 2 * self.param + 0.3 :.2f}'


    @abstractmethod
    def abstract(self):
        return 'Абс метод родитель'


class Coat(Clothes):
    def all_c(self):
        return f'Для пошива пальто потребуется: {self.param / 6.5 + 0.5 :.2f} ткани'

    def abstract(self):
        return 'Абс метод дочерний'


class Costume(Clothes):
    def all_c(self):
        return f'Для пошива костюма потребуется: {2 * self.param + 0.3 :.2f} ткани'

    def abstract(self):
        pass


coat = Coat(400)
costume = Costume(55)
print(coat.all_c)
print(costume.all_c())
print(coat.abstract())

# 3.  
# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. 
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число). 
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно. 
# В методе деления должно осуществляться округление значения до целого числа.

# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида **\n\n***..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: **\n\n.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: **\n\n***.


class Cell:
    def __init__(self, quantity):
         self.quantity = quantity

    def __add__(self, other):
        return f'Результат сложения клеток: {self.quantity + other.quantity}'

    def __sub__(self, other):
        return (f'Результат вычетания клеток: {self.quantity - other.quantity}') if \
            (self.quantity - other.quantity) > 0 else 'Клетки больше нет'

    def __mul__(self, other):
        return f'Результат умножения клеток: {self.quantity * other.quantity}'

    def __truediv__(self, other):
        return f'Результат деления клеток: {int(self.quantity // other.quantity)}'

    def make_order(self, cl):
        res = ''
        for i in range(1, self.quantity + 1):
            if i % cl != 0:
                res += '*'
            else:
                res += '*\n'
        return res


cell = Cell(100)
cell2 = Cell(17)
print(cell + cell2)
print(cell - cell2)
print(cell * cell2)
print(cell / cell2)
print(cell2.make_order(7))
